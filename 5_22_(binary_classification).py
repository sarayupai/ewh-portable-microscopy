# -*- coding: utf-8 -*-
"""5.22 (binary classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11inZJt6uLzcs_QZw_pAm63fDXA4XDdqg

**1.17.21** notebook
"""

# Commented out IPython magic to ensure Python compatibility.
# import libraries
import tensorflow as tf
import numpy as np
import pandas as pd
import seaborn as sns
import sklearn as sk
import matplotlib.pyplot as plt
!pip install beautifulsoup4
!pip install lxml
from bs4 import BeautifulSoup 

from PIL import Image
import os
from os import path

from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Dropout, Flatten, Layer
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from tensorflow.keras.metrics import Metric
from tensorflow import keras
from tensorflow import Module

# <UPDATE> for visualization step
from keras.callbacks import History 
history = History()

# %matplotlib inline
print('Libraries installed successfully')

from google.colab import drive
drive.mount('/content/drive')

"""Actual CNN Starts Here"""

# data preprocessing and augmentation
train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rotation_range = 1, horizontal_flip = True) # some randomizing
test_datagen = tf.keras.preprocessing.image.ImageDataGenerator()
train_generator = train_datagen.flow_from_directory(
        '/content/drive/MyDrive/dataset/fecal/train',
        classes = ['negative','positive'],
        target_size=(100, 100),
        batch_size=64,
        class_mode='binary',
        shuffle = True)
test_generator = test_datagen.flow_from_directory(
        '/content/drive/MyDrive/dataset/fecal/validation',
        classes = ['negative','positive'],
        target_size=(100, 100),
        batch_size=64,
        class_mode='binary')

# sequential cnn model layers 
model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(32, kernel_size=(3, 3),activation='relu', input_shape=(100,100,3)),
                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPool2D(pool_size=(2, 2)),
                                    tf.keras.layers.Dropout(0.25),
                                    tf.keras.layers.Flatten(input_shape = (100,100,3)), 
                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), 
                                    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)]) #only works when 1 in binary, sigmoid for binary

# compile model and evaluation metrics
model.compile(loss=keras.losses.binary_crossentropy, #binary for 2 classes, categorical for classing
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(
        train_generator,
        steps_per_epoch=15,
        epochs=40)

#testing model with new images
score = model.evaluate(test_generator)
print('-Test results-')
print('Test loss:', score[0])
print('Test accuracy:', score[1])

model.metrics_names

# testing the model for binary
Img = Image.open("/content/drive/MyDrive/water-entities.jpg")

#this is the preprocessing you need to do for images:
sample6 = np.array(Img.resize((100,100)).convert('RGB').getdata()).reshape((1,100,100,3))

#prediction
predictionclass = (model.predict(sample6) > 0.5).astype("int32")
predictionprob = model.predict(sample6)
print(predictionclass)
print(predictionprob)
# output format is [positive]
# [0] = negative, [1] = positive

# visualization statistics
f, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
t = f.suptitle('Basic CNN Performance', fontsize = 12)
f.subplots_adjust(top=0.85, wspace=0.3)

max_epoch = len(history.history['accuracy'])+1
epoch_list = list(range(1, max_epoch))
ax1.plot(epoch_list, history.history['accuracy'], label='Train Accuracy')
ax1.set_xticks(np.arange(1, max_epoch, 5))
ax1.set_ylabel('Accuracy Value')
ax1.set_xlabel('Epoch')
ax1.set_title('Accuracy')
l1 = ax1.legend(loc="best")

ax2.plot(epoch_list, history.history['loss'], label='Train Loss')
ax2.set_xticks(np.arange(1, max_epoch, 5))
ax2.set_ylabel('Loss Value')
ax2.set_xlabel('Epoch')
ax2.set_title('Loss')
l2 = ax2.legend(loc="best")

# to save model
model.save('modelfinal.h5')
#!zip -r /content/file.zip /content/cnn_model1
from google.colab import files
files.download("modelfinal.h5")

keras.backend.clear_session()